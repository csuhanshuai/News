package net.bangbao.ui;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.json.JSONObject;

import com.android.volley.VolleyError;
import com.android.volley.toolbox.ImageLoader.ImageContainer;
import com.android.volley.toolbox.ImageLoader.ImageListener;
import com.bangbao.request.RequestManager;

import net.bangbao.AppConfig;
import net.bangbao.R;
import net.bangbao.UserConfig;
import net.bangbao.base.BaseActivity;
import net.bangbao.common.Ids;
import net.bangbao.common.TimeUtils;
import net.bangbao.common.UIHelper;
import net.bangbao.dao.BaseApi;
import net.bangbao.dao.ConsultMessApi;
import net.bangbao.dao.CustomerMessApi;
import net.bangbao.dao.User.CustomerMessageStruct;
import net.bangbao.dao.User.PasswordMessageStruct;
import net.bangbao.http.ApiClient;
import net.bangbao.ui.ConsultMessageActivity.ConsultUser1;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.EditText;
import android.widget.LinearLayout;
import android.widget.TextView;

public class CustomerMessageActivity extends BaseActivity implements View.OnClickListener{
	
	private TextView u_name;
	private EditText nick;
	private TextView button;
	
	
	private EditText old_pwd,new_pwd,re_pwd;
	private TextView toast;
	
	private UserConfig userConfig;
	@Override
	protected void onCreate(Bundle arg0) {
		super.onCreate(arg0);
		setContentView(R.layout.customer_message);
		initViews();
		setup();
	}
	
	public static class CustomerUser1{
		public static String nick_nm1;
	}
	
	public static class CustomerUser2{
		public static String nick_nm2;
	}

	private void initViews() {
		userConfig = AppConfig.getUser();
		u_name = (TextView) findViewById(R.id.u_name);
		u_name.setText(userConfig.getUserName());
		
		nick = (EditText) findViewById(R.id.nickname);
		button =  (TextView) findViewById(R.id.modify);
		button.setOnClickListener(new OnClickListener() {
			
			@Override
			public void onClick(View v) {
				if(button.getText().equals("完成"))
									complete2();
				else if(button.getText().equals("修改")){
					setup1();
				}
				
			}
		});
		
		old_pwd = (EditText) findViewById(R.id.old_pwd);
		new_pwd = (EditText) findViewById(R.id.new_pwd);
		re_pwd = (EditText) findViewById(R.id.confirm);
		
		toast = (TextView) findViewById(R.id.toast);
		
		new ApiClient().getCustomerMess(userConfig.getUserId(),userConfig.getUserToken(),this, CustomerMessApi.class, 
				new ApiClient.CallBack<CustomerMessApi>() {

			@Override
			public void success(CustomerMessApi api) {
				if(api == null)return;
				ConsultUser1.eng1 = api.getNick_nm();
				englishname.setText(ConsultUser1.eng1);
				ConsultUser1.co_id1 = api.getCo_id()-1;
				String co = Ids.getComm(ConsultUser1.co_id1);
				company.setText(co);
				ConsultUser1.ctt1 = api.getCtt();
				contact.setText(ConsultUser1.ctt1);
				ConsultUser1.bday_tmtp1 = api.getBday_tmtp();
				String bd = TimeUtils.getStrTime1(ConsultUser1.bday_tmtp1);
				Log.d("bb", "db"+bd);
				year.setText(bd.substring(0, 4));
				month.setText(bd.substring(5, 6));
				day.setText(bd.substring(7, 8));
				ConsultUser1.sex1 = api.getSex()-1;
				String string = Ids.getSex(ConsultUser1.sex1);
				sex3.setText(string);
				ConsultUser1.prov_id1 = api.getProv_id()-1;
				hometown.setSelection(ConsultUser1.prov_id1, true);
				ConsultUser1.edu_id1 = api.getEdu_id()-1;
				String ed = Ids.getEdu(ConsultUser1.edu_id1);
				edu_id.setText(ed);
				ConsultUser1.bgn_tmtp1 = api.getBgn_tmtp();
				Log.d("bb", "bgn_tmtp1"+ConsultUser1.bgn_tmtp1);
				String s = Long.toString((System.currentTimeMillis()/1000-ConsultUser1.bgn_tmtp1)/(365*24*60*60));
				year1.setText(s);
//				month1.setText(s.substring(5, 6));
//				day1.setText(s.substring(7, 8));
				ConsultUser1.cert1 = api.getCert_no();
				qua.setText(ConsultUser1.cert1);
				ConsultUser1.ins1 = api.getIns_say();
				thought.setText(ConsultUser1.ins1);
				ConsultUser1.honor1 = api.getHonor_say();
				honour.setText(ConsultUser1.honor1);
				ConsultUser1.image_url1 = api.getImage_url();
				if(api.getImage_url()!=null){
				RequestManager.loadImage(api.getImage_url(), new ImageListener() {
					
					@Override
					public void onErrorResponse(VolleyError error) {
						
					}
					
					@Override
					public void onResponse(ImageContainer response, boolean isImmediate) {
						picture.setImageBitmap(response.getBitmap());
						
					}
				});
				}
			}

			@Override
			public void fail(String error) {
				
			}
		});
		
	}
	
	public static Map<String, Object> getMapForJson(String jsonStr){  
        JSONObject jsonObject ;  
        try {  
            jsonObject = new JSONObject(jsonStr);  
              
            Iterator<String> keyIter= jsonObject.keys();  
            String key;  
            Object value ;  
            Map<String, Object> valueMap = new HashMap<String, Object>();  
            while (keyIter.hasNext()) {  
                key = keyIter.next();  
                value = jsonObject.get(key);  
                valueMap.put(key, value);  
            }  
            return valueMap;  
        } catch (Exception e) {  
            // TODO: handle exception  
            e.printStackTrace();  
        }  
        return null;  
    }  
	
	
	public void setup(){
		button.setText("修改");
		nick.setEnabled(false);
		LinearLayout li = (LinearLayout) findViewById(R.id.old);
		LinearLayout li1 = (LinearLayout) findViewById(R.id.pw);
		LinearLayout li2 = (LinearLayout) findViewById(R.id.repw);
		li.setVisibility(View.GONE);
		li1.setVisibility(View.GONE);
		li2.setVisibility(View.GONE);
	}
	
	public void setup1(){
		button.setText("完成");
		nick.setEnabled(true);
		LinearLayout li = (LinearLayout) findViewById(R.id.old);
		LinearLayout li1 = (LinearLayout) findViewById(R.id.pw);
		LinearLayout li2 = (LinearLayout) findViewById(R.id.repw);
		li.setVisibility(View.VISIBLE);
		li1.setVisibility(View.VISIBLE);
		li2.setVisibility(View.VISIBLE);
	}
	
	public void complete2(){
		if(nick.getText().toString().trim().length() == 0){
			UIHelper.showToastMessage("昵称不能为空");
			return;
		}
		
		CustomerMessageStruct customer = new CustomerMessageStruct();
		PasswordMessageStruct pass = new PasswordMessageStruct();
		//昵称
		String ni = nick.getText().toString().trim();
		customer.nick_nm = ni;
		//原始密码
		String old = old_pwd.getText().toString().trim();
		pass.old_pwd = old;
		//新密码
		String ne = new_pwd.getText().toString().trim();
		pass.new_pwd = ne;
		//确认密码
		String re = re_pwd.getText().toString().trim();
		if(!re.equals(ne)){
			re_pwd.setText(null);
			toast.setText("密码不一致,请重新确认密码");
		}
		button.setEnabled(false);
		new ApiClient().changePassword(pass, userConfig.getUserName(), this, BaseApi.class,
				new ApiClient.CallBack<BaseApi>(){

					@Override
					public void success(BaseApi api) {
						button.setEnabled(true);
						if(api == null) return;
						if(api.getRet_cd() == 0){
							UIHelper.showToastMessage("密码修改成功");
						}
						if(api.getRet_cd() == 14){
							UIHelper.showToastMessage(api.getRet_txt());
						}
					}

					@Override
					public void fail(String error) {
						UIHelper.showToastMessage(
								"当前网络有问题！");
						button.setEnabled(true);
					}
			
		});
		new ApiClient().deliverCustomerMessage(customer, userConfig.getUserId(), userConfig.getUserToken(), this, BaseApi.class,
				new  ApiClient.CallBack<BaseApi>(){

					@Override
					public void success(BaseApi api) {
						button.setEnabled(true);
						if(api == null) return;
						if(api.getRet_cd() == 0){
							UIHelper.showToastMessage("昵称提交成功");
							setup();
						}
					}

					@Override
					public void fail(String error) {
						UIHelper.showToastMessage(
								"当前网络有问题！");
						button.setEnabled(true);
					}
			
		});
		
		
		
	}
	public void back(View v)
	{
		onBackPressed();
	}

	@Override
	public void onClick(View v) {
		switch (v.getId()) {

		default:
			break;
		}
		
	}

}
